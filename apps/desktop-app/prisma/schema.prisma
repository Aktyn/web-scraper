generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../external/erd.pdf"
  theme                     = "default"
  includeRelationFromFields = true
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Site {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  url              String             @unique
  language         String?
  //
  Tags             SiteTagsRelation[]
  Accounts         Account[]
  SiteInstructions SiteInstructions?
}

model SiteTag {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String?
  Sites       SiteTagsRelation[]
}

model SiteTagsRelation {
  tagId  Int
  Tag    SiteTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  siteId Int
  Site   Site    @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@id([tagId, siteId])
}

model Account {
  id                        Int       @id @default(autoincrement())
  createdAt                 DateTime  @default(now())
  loginOrEmail              Bytes // encrypted
  password                  Bytes // encrypted
  additionalCredentialsData Bytes? // encrypted
  lastUsed                  DateTime?
  active                    Boolean?  @default(true)
  // TODO: email account relation
  //
  siteId                    Int
  Site                      Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model SiteInstructions {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  //
  siteId     Int         @unique
  Site       Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
  //
  Procedures Procedure[]
  Actions    Action[]
}

model Action {
  id                 Int              @id @default(autoincrement())
  name               String
  url                String?
  //
  siteInstructionsId Int
  SiteInstructions   SiteInstructions @relation(fields: [siteInstructionsId], references: [id], onDelete: Cascade)
  //
  ActionSteps        ActionStep[]
}

model ActionStep {
  id         Int     @id @default(autoincrement())
  type       String // enum value
  data       String? // Stringified JSON
  orderIndex Int // used for preserving order of steps in action
  //
  actionId   Int
  Action     Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([actionId, orderIndex])
}

model Procedure {
  id                 Int              @id @default(autoincrement())
  type               String // enum value
  // consider adding "name" or "description" field
  startUrl           String
  waitFor            String?
  //
  siteInstructionsId Int
  SiteInstructions   SiteInstructions @relation(fields: [siteInstructionsId], references: [id], onDelete: Cascade)
  flowStepId         Int?
  FlowStep           FlowStep?        @relation(fields: [flowStepId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model FlowStep {
  id                  Int         @id @default(autoincrement())
  actionName          String // "global.{GLOBAL_ACTION_TYPE (enum)}" or "action.{Action.name}"
  globalReturnValues  String? // Stringified array of values or paths to html elements that will be used as arguments to global action function
  //
  onSuccessFlowStepId Int?
  OnSuccessFlowStep   FlowStep?   @relation("NextFlowOnSuccess", fields: [onSuccessFlowStepId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  onFailureFlowStepId Int?
  OnFailureFlowStep   FlowStep?   @relation("NextFlowOnFailure", fields: [onFailureFlowStepId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  //
  Procedures          Procedure[]
  OnSuccessFlowSteps  FlowStep[]  @relation("NextFlowOnSuccess")
  OnFailureFlowSteps  FlowStep[]  @relation("NextFlowOnFailure")
}

model UserData {
  key   String @id
  value String
}
